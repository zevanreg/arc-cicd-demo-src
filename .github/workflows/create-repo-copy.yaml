name: Clone and Configure Repo

on:
  workflow_dispatch:
    inputs:
      new_repo_name:
        description: 'Optional: Name of the new repository'
        required: false

jobs:
  clone-and-configure:
    runs-on: ubuntu-latest
    outputs:
      TARGET_REPO: ${{ steps.set-name.outputs.TARGET_REPO }}
    env:
      GH_TOKEN: ${{ secrets.ADMIN_PAT }}
      GITOPS_REPO: "arc-cicd-demo-gitops"
      AKS_NAME: ${{ secrets.AKS_NAME }}
      AKS_RESOURCE_GROUP: ${{ secrets.AKS_RESOURCE_GROUP }}
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
      AZ_ACR_NAME: ${{ secrets.AZ_ACR_NAME }}
      MANIFESTS_BRANCH: ${{ secrets.MANIFESTS_BRANCH }}
      MANIFESTS_FOLDER: ${{ secrets.MANIFESTS_FOLDER }}
      MANIFESTS_REPO: https://github.com/${TARGET_GITOPS_REPO}
      PAT: ${{ secrets.PAT }}
      VOTE_APP_TITLE: ${{ secrets.VOTE_APP_TITLE }}
      
    steps:
    - name: Set dynamic repo name
      id: set-name
      run: |
        DATE=$(date +%Y%m%d)
        CURRENT_REPO=$(basename "$GITHUB_REPOSITORY")
        OWNER=$(cut -d'/' -f1 <<< "$GITHUB_REPOSITORY")
        DEFAULT_NAME="${CURRENT_REPO}-${DATE}"
        TARGET_GITOPS_REPO="${GITOPS_REPO}-${DATE}"

        if [ -z "${{ github.event.inputs.new_repo_name }}" ]; then
          REPO_NAME="$DEFAULT_NAME"
        else
          REPO_NAME="${{ github.event.inputs.new_repo_name }}"
        fi

        echo "TARGET_REPO=$OWNER/$REPO_NAME" >> $GITHUB_ENV
        echo "TARGET_GITOPS_REPO=$OWNER/$TARGET_GITOPS_REPO" >> $GITHUB_ENV
        echo "TARGET_REPO=$OWNER/$REPO_NAME" >> $GITHUB_OUTPUT

    - name: Clone current repo into temp dir
      run: |
        git clone https://github.com/${GITHUB_REPOSITORY}.git temp-repo
        cd temp-repo
        git remote remove origin

    - name: Create new repo from temp dir
      run: |
        cd temp-repo
        gh repo create "$TARGET_REPO" --public --source=. --push

    - name: Set secrets in new repo
      run: |
        gh secret set AKS_NAME --body "$AKS_NAME" --repo "$TARGET_REPO"
        gh secret set AKS_RESOURCE_GROUP --body "$AKS_RESOURCE_GROUP" --repo "$TARGET_REPO"
        gh secret set AZURE_CREDENTIALS --body "$AZURE_CREDENTIALS" --repo "$TARGET_REPO"
        gh secret set AZ_ACR_NAME --body "$AZ_ACR_NAME" --repo "$TARGET_REPO"
        gh secret set MANIFESTS_BRANCH --body "$MANIFESTS_BRANCH" --repo "$TARGET_REPO"
        gh secret set MANIFESTS_FOLDER --body "$MANIFESTS_FOLDER" --repo "$TARGET_REPO"
        gh secret set MANIFESTS_REPO --body "https://github.com/${TARGET_GITOPS_REPO}" --repo "$TARGET_REPO"
        gh secret set PAT --body "$PAT" --repo "$TARGET_REPO"
        gh secret set VOTE_APP_TITLE --body "$VOTE_APP_TITLE" --repo "$TARGET_REPO"
        
    - name: Clone gitops repo into temp dir
      run: |
        git clone https://github.com/Azure/${GITOPS_REPO}.git temp-gitops-repo
        cd temp-gitops-repo
        git remote remove origin

    - name: Create new gitops repo from temp dir
      run: |
        cd temp-gitops-repo
        gh repo create "$TARGET_GITOPS_REPO" --public --source=. --push

  clone-and-configure-environments:
    runs-on: ubuntu-latest
    needs: clone-and-configure
    strategy:
      matrix:
        env: [dev,stage]
    env:
      GH_TOKEN: ${{ secrets.ADMIN_PAT }}
      ENVIRONMENT_NAME: ${{ secrets.ENVIRONMENT_NAME }}
      TARGET_NAMESPACE:  ${{ secrets.TARGET_NAMESPACE }}

    steps:
    - name: Set TARGET_REPO
      run: |
        echo "Target repo is ${{ needs.clone-and-configure.outputs.target_repo }}"
        echo "TARGET_REPO=${{ needs.clone-and-configure.outputs.target_repo }}" >> $GITHUB_ENV

    - name: Create environment and set secret
      run: |
        gh api --method PUT "/repos/$TARGET_REPO/environments/az-vote-app-${{ matrix.env }}"
        gh secret set ENVIRONMENT_NAME --env az-vote-app-dev --body "$ENVIRONMENT_NAME" --repo "$TARGET_REPO"
        gh secret set TARGET_NAMESPACE --env az-vote-app-dev --body "$TARGET_NAMESPACE" --repo "$TARGET_REPO"

